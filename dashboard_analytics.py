"""
dashboard_analytics.py
------------------------
Dashboard desenvolvido em Streamlit para an√°lise gr√°fica das previs√µes de Churn.

Objetivo:
- Fornecer uma visualiza√ß√£o amig√°vel dos dados processados.
- Gerar insights visuais atrav√©s de gr√°ficos de dispers√£o, histogramas e m√©tricas de churn.
- Facilitar a interpreta√ß√£o do comportamento dos usu√°rios que geram ou n√£o churn.

Funcionalidades:
- Upload de arquivo CSV com colunas espec√≠ficas para an√°lise (pageviews, timeOnSite, tempo_por_pagina, ticket_medio).
- Gera√ß√£o de previs√µes de churn usando o modelo pr√©-treinado.
- Exibi√ß√£o de m√©tricas de reten√ß√£o vs churn.
- Visualiza√ß√µes gr√°ficas autom√°ticas para facilitar o entendimento dos padr√µes de comportamento dos usu√°rios.

Impacto:
- Auxilia analistas e gestores a identificar rapidamente padr√µes de churn.
- Suporte na cria√ß√£o de campanhas de reten√ß√£o personalizadas baseadas em dados hist√≥ricos e predi√ß√µes.
- Reduz o custo de churn aumentando a efic√°cia das a√ß√µes de reten√ß√£o.

Nota:
- Este arquivo complementa o `dashboard.py` focando em visualiza√ß√µes anal√≠ticas.
- Pode ser utilizado tanto em ambiente local quanto ser futuramente dockerizado para demonstra√ß√£o online.
"""



import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

# Configura√ß√µes iniciais
st.set_page_config(page_title="Dashboard Churn", layout="wide")
sns.set_style("whitegrid")

# T√≠tulo principal
st.title('üîÆ Dashboard de Previs√£o e An√°lise de Churn')

# Carregar modelo
model = joblib.load('models/churn_model.pkl')

# Instru√ß√µes de uso
st.markdown("""
### üìã Como utilizar:
1. Baixe o exemplo de CSV no bot√£o abaixo.
2. Preencha ou edite mantendo as mesmas colunas.
3. Fa√ßa upload do seu arquivo CSV.
4. Clique no bot√£o para prever churn e analisar!
""")

# Exemplo de CSV
def gerar_exemplo_csv():
    data = {
        "pageviews": [8, 5, 10, 3, 12],
        "timeOnSite": [350.0, 120.0, 600.0, 90.0, 720.0],
        "tempo_por_pagina": [43.75, 24.0, 60.0, 30.0, 60.0],
        "ticket_medio": [1200.0, 800.0, 2000.0, 500.0, 1800.0],
        "engajamento_baixo": [0, 1, 0, 1, 0],
        "visitante_rapido": [0, 1, 0, 1, 0],
        "cliente_ticket_alto": [1, 0, 1, 0, 1],
        "device_mobile": [1, 1, 0, 1, 0],
        "device_tablet": [0, 0, 0, 0, 1],
        "device_desktop": [0, 0, 1, 0, 0],
        "via_organica": [1, 0, 1, 0, 1],
        "via_pago": [0, 1, 0, 1, 0]
    }
    return pd.DataFrame(data)

exemplo_csv = gerar_exemplo_csv()
st.download_button(
    label="üì• Baixar Exemplo de CSV",
    data=exemplo_csv.to_csv(index=False).encode('utf-8'),
    file_name='exemplo_upload_churn.csv',
    mime='text/csv'
)

st.divider()

# Upload do arquivo
uploaded_file = st.file_uploader("üìÇ Fa√ßa upload do seu arquivo CSV:", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    st.subheader('üëÄ Pr√©-visualiza√ß√£o dos Dados:')
    st.dataframe(df.head())

    if st.button('üöÄ Prever Churn e Analisar'):
        predictions = model.predict(df)
        df['churn_prediction'] = predictions

        st.success('‚úÖ Previs√µes realizadas com sucesso! Veja abaixo os resultados.')

        st.divider()

        # Distribui√ß√£o Churn
        st.header('üìä Distribui√ß√£o de Churn')

        col1, col2 = st.columns([2, 1])

        with col1:
            fig, ax = plt.subplots(figsize=(6, 4))
            sns.countplot(x='churn_prediction', data=df, palette='pastel', ax=ax)
            ax.set_xlabel('Churn Prediction (0 = Permanece, 1 = Churn)', fontsize=12)
            ax.set_ylabel('Contagem', fontsize=12)
            ax.set_title('Distribui√ß√£o de Clientes - Churn vs Perman√™ncia', fontsize=16)
            fig.tight_layout()
            st.pyplot(fig, use_container_width=True)

        with col2:
            churn_percent = (df['churn_prediction'].sum() / df.shape[0]) * 100
            stay_percent = 100 - churn_percent

            fig_pie, ax_pie = plt.subplots(figsize=(4, 4))
            ax_pie.pie([stay_percent, churn_percent],
                       labels=['Permanecer', 'Churn'],
                       autopct='%1.1f%%',
                       colors=['#90ee90', '#ff9999'],
                       startangle=90,
                       explode=(0, 0.1))
            ax_pie.axis('equal')
            st.pyplot(fig_pie, use_container_width=True)

        st.divider()

        # Insights principais
        st.header('üß† Insights Gerais')
        st.markdown(f"""
        - **{churn_percent:.2f}%** dos clientes t√™m alta probabilidade de churn.
        - **{stay_percent:.2f}%** dos clientes devem permanecer.
        """, unsafe_allow_html=True)

        st.divider()

        # An√°lises Comportamentais
        st.header('üìà An√°lises Comportamentais')

        col3, col4 = st.columns(2)

        with col3:
            st.subheader('Tempo no site (segundos)')
            fig1, ax1 = plt.subplots(figsize=(5, 3.5))
            sns.boxplot(x='churn_prediction', y='timeOnSite', data=df, palette='Set2', ax=ax1)
            ax1.set_xlabel('Churn Prediction')
            ax1.set_ylabel('Tempo no Site')
            fig1.tight_layout()
            st.pyplot(fig1, use_container_width=True)

        with col4:
            st.subheader('N√∫mero de Pageviews')
            fig2, ax2 = plt.subplots(figsize=(5, 3.5))
            sns.boxplot(x='churn_prediction', y='pageviews', data=df, palette='Set2', ax=ax2)
            ax2.set_xlabel('Churn Prediction')
            ax2.set_ylabel('Pageviews')
            fig2.tight_layout()
            st.pyplot(fig2, use_container_width=True)

        st.subheader('Ticket M√©dio por Grupo')
        fig3, ax3 = plt.subplots(figsize=(6, 4))
        sns.boxplot(x='churn_prediction', y='ticket_medio', data=df, palette='Set3', ax=ax3)
        ax3.set_xlabel('Churn Prediction')
        ax3.set_ylabel('Ticket M√©dio (R$)')
        fig3.tight_layout()
        st.pyplot(fig3, use_container_width=True)

        churn_group = df.groupby('churn_prediction').agg({
            'timeOnSite': 'mean',
            'pageviews': 'mean',
            'ticket_medio': 'mean'
        }).reset_index()

        st.markdown(f"""
        ### üìã An√°lises Detalhadas:
        - Perman√™ncia: tempo m√©dio no site de **{churn_group.loc[churn_group['churn_prediction'] == 0, 'timeOnSite'].values[0]:.2f} segundos**.
        - Churn: tempo m√©dio no site de **{churn_group.loc[churn_group['churn_prediction'] == 1, 'timeOnSite'].values[0]:.2f} segundos**.
        - Perman√™ncia: m√©dia de **{churn_group.loc[churn_group['churn_prediction'] == 0, 'pageviews'].values[0]:.2f} pageviews**.
        - Churn: m√©dia de **{churn_group.loc[churn_group['churn_prediction'] == 1, 'pageviews'].values[0]:.2f} pageviews**.
        - Perman√™ncia: ticket m√©dio de **R$ {churn_group.loc[churn_group['churn_prediction'] == 0, 'ticket_medio'].values[0]:.2f}**.
        - Churn: ticket m√©dio de **R$ {churn_group.loc[churn_group['churn_prediction'] == 1, 'ticket_medio'].values[0]:.2f}**.
        """, unsafe_allow_html=True)

        st.divider()

        # Baixar arquivo
        csv_resultado = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• Baixar Dados com Previs√£o e An√°lise",
            data=csv_resultado,
            file_name='churn_predictions_analise.csv',
            mime='text/csv'
        )
